-- MySQL Script generated by MySQL Workbench
-- 11/06/14 03:10:40
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema printer_authentication
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema printer_authentication
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `printer_authentication` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci ;
USE `printer_authentication` ;

-- -----------------------------------------------------
-- Table `printer_authentication`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `printer_authentication`.`users` ;

CREATE TABLE IF NOT EXISTS `printer_authentication`.`users` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(255) NOT NULL,
  `salted_password` VARCHAR(255) NOT NULL,
  `salt` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC))
ENGINE = InnoDB;

USE `printer_authentication` ;

-- -----------------------------------------------------
-- procedure add_user
-- -----------------------------------------------------

USE `printer_authentication`;
DROP procedure IF EXISTS `printer_authentication`.`add_user`;

DELIMITER $$
USE `printer_authentication`$$

CREATE PROCEDURE `printer_authentication`.`add_user` (IN username Varchar(255), IN pass Varchar(255))
BEGIN
    declare salt Varchar(255);
    declare saltedPassword Varchar(255);
    set salt = sha2(rand(),512);
    set saltedPassword = sha2(CONCAT(pass,salt),512);
    INSERT INTO users VALUES (0,username,saltedPassword,salt);
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- function authenticate_message
-- -----------------------------------------------------

USE `printer_authentication`;
DROP function IF EXISTS `printer_authentication`.`authenticate_message`;

DELIMITER $$
USE `printer_authentication`$$



CREATE FUNCTION `printer_authentication`.`authenticate_message` (username VARCHAR(255), msgHash varchar(255)) 
RETURNS VARCHAR(255)
BEGIN
	DECLARE pass VARCHAR(255);
    DECLARE message VARCHAR(255);
	SET pass = (SELECT salted_password FROM users WHERE users.username = username);
    set message =  sha2(CONCAT(msgHash,username,pass),512);
    return message;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_salt
-- -----------------------------------------------------

USE `printer_authentication`;
DROP function IF EXISTS `printer_authentication`.`get_salt`;

DELIMITER $$
USE `printer_authentication`$$



CREATE FUNCTION `printer_authentication`.`get_salt` (username VARCHAR(255)) 
RETURNS Varchar(255)
BEGIN
    return (SELECT salt FROM users WHERE users.username = username);
END$$

DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO printer_server;
 DROP USER printer_server;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'printer_server' IDENTIFIED BY 'password';

GRANT EXECUTE ON function `printer_authentication`.`authenticate_message` TO 'printer_server';
GRANT EXECUTE ON function `printer_authentication`.`get_salt` TO 'printer_server';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `printer_authentication`.`users`
-- -----------------------------------------------------
START TRANSACTION;
USE `printer_authentication`;
INSERT INTO `printer_authentication`.`users` (`id`, `username`, `salted_password`, `salt`) VALUES (1, 'admin', '79e0e26bfb3d0af212b2237b896b7338096685f8d55600ca0d8458f6d7081519058a86574049c8eb10ad00671e003b6a9f3bd28688a676caeb38621234d13d66', '5a2cf824af0d0081cd7f553d871c1d4a03309c873b31bdeb16da6beb42bb640ba2007c9b43c9899594648c72b24d31cdf29ebbc2fdd3c054989705eef74062fb');

COMMIT;

